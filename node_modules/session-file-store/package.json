{
  "_from": "session-file-store",
  "_id": "session-file-store@1.2.0",
  "_inBundle": false,
  "_integrity": "sha512-DkYLYFkkK6u9xyraVHemulhlUuuufLukf7SQxOZSx8SPwkswcaIrls882PaQZ72zRKsyhUVNxOUl9w0lQubUFw==",
  "_location": "/session-file-store",
  "_phantomChildren": {
    "graceful-fs": "4.1.11",
    "imurmurhash": "0.1.4",
    "slide": "1.1.6"
  },
  "_requested": {
    "escapedName": "session-file-store",
    "fetchSpec": "latest",
    "name": "session-file-store",
    "raw": "session-file-store",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/session-file-store/-/session-file-store-1.2.0.tgz",
  "_shasum": "35a994a7fb0cbf7f784067bf9059939c520b7c44",
  "_shrinkwrap": null,
  "_spec": "session-file-store",
  "_where": "/Users/plgv/Desktop/paris-0218-wild-connection",
  "author": {
    "email": "valery.barysok@gmail.com",
    "name": "Valery Barysok"
  },
  "bugs": {
    "url": "https://github.com/valery-barysok/session-file-store/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Igor Svehla",
      "url": "wespen"
    },
    {
      "name": "Bill Christo",
      "url": "bchr02"
    },
    {
      "name": "Ryan Murphy",
      "url": "r-murphy"
    },
    {
      "name": "Norberth Danson",
      "url": "ndanson"
    },
    {
      "name": "Arnaud Bétrémieux",
      "url": "arnoo"
    },
    {
      "name": "Guson",
      "url": "gusonyang"
    },
    {
      "name": "Philipp Sporrer",
      "url": "PhilippSpo"
    },
    {
      "name": "Tyler Young",
      "url": "tyoung86"
    },
    {
      "name": "Mikko Kaistinen",
      "url": "Laastine"
    }
  ],
  "dependencies": {
    "bagpipe": "^0.3.5",
    "fs-extra": "^4.0.0",
    "object-assign": "^4.1.1",
    "retry": "^0.10.0",
    "write-file-atomic": "1.3.1"
  },
  "deprecated": false,
  "description": "Session file store is a provision for storing session data in the session file",
  "devDependencies": {
    "cbor-sync": "^1.0.2",
    "chai": "^4.1.0",
    "coveralls": "^2.11.8",
    "istanbul": "^0.4.2",
    "lodash.clone": "^4.3.1",
    "mocha": "^3.4.2"
  },
  "engines": {
    "node": ">= 4"
  },
  "files": [
    "LICENSE",
    "README.md",
    "index.js",
    "lib/"
  ],
  "homepage": "https://github.com/valery-barysok/session-file-store",
  "keywords": [
    "connect",
    "express",
    "file",
    "session",
    "store"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "session-file-store",
  "optionalDependencies": {},
  "private": false,
  "readme": "# session-file-store\n\nSession file store for [Express](http://expressjs.com/) and [Connect](https://github.com/senchalabs/connect).\nAlso you can use it with [Koa](http://koajs.com/)\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nSession file store is a provision for storing session data in the session file\n\n## Compatibility\n\n* Supports Express `>= 4.x` and Connect `>= 1.4.0` through [express-session][express-session-url]\n* Supports [Node.js][node-url] `>= 4`\n* Indirectly supports Koa `>= 0.9.0` through [express-session][express-session-url]\n\n## Getting Started\n\n### Installation\n\n    $ npm install session-file-store\n\n### Running Tests\n\n    $ npm install\n    $ npm test\n\n## Options\n\n  - `path`               The directory where the session files will be stored. Defaults to `./sessions`\n  - `ttl`                Session time to live in seconds. Defaults to `3600`\n  - `retries`            The number of retries to get session data from a session file. Defaults to `5`\n  - `factor`             The exponential factor to use for retry. Defaults to `1`\n  - `minTimeout`         The number of milliseconds before starting the first retry. Defaults to `50`\n  - `maxTimeout`         The maximum number of milliseconds between two retries. Defaults to `100`\n  - `reapIntervalObject` [OUT] Contains intervalObject if reap was scheduled\n  - `reapInterval`       Interval to clear expired sessions in seconds or -1 if do not need. Defaults to `1 hour`\n  - `reapAsync`          use distinct worker process for removing stale sessions. Defaults to `false`\n  - `reapSyncFallback`   reap stale sessions synchronously if can not do it asynchronously. Default to `false`\n  - `logFn`              log messages. Defaults to `console.log`\n  - `fallbackSessionFn`  returns fallback session object after all failed retries. No defaults\n  - `secret`             if secret string is specified then enables encryption of the session before writing the file and also decryption when reading it.\n  - `encryptEncoding`    Encryption output encoding. Defaults to `'hex'`\n  - `encoding`           Object-to-text text encoding. Can be null. Defaults to `'utf8'`\n  - `encoder`            Encoding function. Takes object, returns encoded data. Defaults to `JSON.stringify`\n  - `decoder`            Decoding function. Takes encoded data, returns object. Defaults to `JSON.parse`\n  - `fileExtension`      File extension of saved files. Defaults to `'.json'`\n  - `keyFunction`        Encryption key retrieval function. Takes secret and session id, returns key. Defaults to `function(secret, sessionId){return secret + sessionId;}`\n\n## Usage\n\n### Express or Connect integration\n\nDue to express `>= 4` changes, we need to pass `express-session` to the function `session-file-store` exports in order to extend `session.Store`:\n\n```js\nvar session = require('express-session');\nvar FileStore = require('session-file-store')(session);\n\napp.use(session({\n    store: new FileStore(options),\n    secret: 'keyboard cat'\n}));\n```\n\n## Examples\n\nYou can found basic work [app examples](https://github.com/valery-barysok/session-file-store/tree/master/examples)\nfor [express](https://github.com/valery-barysok/session-file-store/tree/master/examples/express-example),\n[connect](https://github.com/valery-barysok/session-file-store/tree/master/examples/connect-example) and\n[koa](https://github.com/valery-barysok/session-file-store/tree/master/examples/koa-example) frameworks in `examples` folder.\n\n[npm-version-image]: https://img.shields.io/npm/v/session-file-store.svg?style=flat-square\n[npm-downloads-image]: https://img.shields.io/npm/dm/session-file-store.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/session-file-store\n[travis-image]: https://img.shields.io/travis/valery-barysok/session-file-store/master.svg?style=flat-square\n[travis-url]: https://travis-ci.org/valery-barysok/session-file-store\n[coveralls-image]: https://img.shields.io/coveralls/valery-barysok/session-file-store/master.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/valery-barysok/session-file-store?branch=master\n[node-image]: https://img.shields.io/node/v/session-file-store.svg?style=flat-square\n[node-url]: http://nodejs.org/download/\n[express-session-url]: https://github.com/expressjs/session\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/valery-barysok/session-file-store.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "test-ci": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- --reporter spec --check-leaks test/",
    "test-cov": "istanbul cover ./node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
    "test-tap": "mocha --reporter tap --check-leaks test/"
  },
  "version": "1.2.0"
}
